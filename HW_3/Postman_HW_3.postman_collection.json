{
	"info": {
		"_postman_id": "452aeb04-9899-4d98-ac1b-a4cf5c4044ca",
		"name": "Postman_HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18387781"
	},
	"item": [
		{
			"name": "1. /login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Приходящий токен необходимо передать во все остальные запросы\r",
							"\r",
							"let token = pm.response.json().token;\r",
							"pm.environment.set(\"token\", token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwer1234",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/login",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. /user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"person\":{\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\"type\": \"integer\"},\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\"type\": \"string\"},\r",
							"                        {\"type\": \"integer\"},\r",
							"                        {\"type\": \"integer\"}\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"},                             \r",
							"            },\r",
							"            \"additionalProperties\": false\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\"type\": \"number\"},\r",
							"        \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"        \"start_qa_salary\": {\"type\": \"integer\"},\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"}\r",
							"pm.test(\"JSON-schema is valid\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let req = JSON.parse(request.data);\r",
							"let resp = pm.response.json();\r",
							"pm.test(\"Correct coefficient\", function () {\r",
							"    pm.expect(resp.start_qa_salary).to.eql(req.salary)\r",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2)\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.9)\r",
							"    pm.expect(resp.person.u_salary_1_5_year).to.eql(req.salary*4)\r",
							"});\r",
							"\r",
							"// Достать значение из поля 'u_salary_1_5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"let u_salary_1_5_year = resp.person.u_salary_1_5_year\r",
							"pm.environment.set(\"newSalary\", u_salary_1_5_year)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alex\",\r\n    \"age\": 27,\r\n    \"salary\": 5000,\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. /new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": [\r",
							"                {\"type\": \"integer\"},\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"string\"}\r",
							"            ]\r",
							"        },\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"};\r",
							"pm.test(\"JSON-schema is valid\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let req = request.data;\r",
							"let resp = pm.response.json();\r",
							"pm.test(\"Correct coefficient\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary)\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2)\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3)\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"// Вариант 1:\r",
							"pm.test(\"1) 2nd element of the salary array is greater than the 1st and 0th\", function () {\r",
							"    pm.expect(resp.salary[2]>resp.salary[1]).to.be.true\r",
							"    pm.expect(resp.salary[2]>resp.salary[0]).to.be.true\r",
							"});\r",
							"// Выриант 2:\r",
							"pm.test(\"2) 2nd element of the salary array is greater than the 1st and 0th\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.be.above(+resp.salary[1])\r",
							"    pm.expect(+resp.salary[2]).to.be.above(resp.salary[0])\r",
							"});\r",
							"// Вариант 3:\r",
							"pm.test(\"3) 2nd element of the salary array is greater than the 1st and 0th\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.greaterThan(+resp.salary[1])\r",
							"    pm.expect(+resp.salary[2]).to.greaterThan(resp.salary[0])\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/new_data",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. /test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"daily_food\": {\"type\": \"number\"},\r",
							"        \"daily_sleep\": {\"type\": \"number\"},\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"};\r",
							"pm.test(\"JSON-schema is valid\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let req = request.data;\r",
							"let resp = pm.response.json();\r",
							"pm.test(\"Correct coefficient\", function () {\r",
							"    pm.expect(resp.daily_food).to.eql(req.weight*0.012)\r",
							"    pm.expect(resp.daily_sleep).to.eql(req.weight*2.5)  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "4",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "5",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Klaus",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. /get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"string\"},\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\"type\": \"array\",\r",
							"                        \"items\": [\r",
							"                            {\"type\": \"string\"},\r",
							"                            {\"type\": \"integer\"},\r",
							"                        ]\r",
							"                        },\r",
							"                        {\"type\": \"array\",\r",
							"                        \"items\": [\r",
							"                            {\"type\": \"string\"},\r",
							"                            {\"type\": \"integer\"},\r",
							"                        ]\r",
							"                        },    \r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"},                             \r",
							"            },\r",
							"            \"additionalProperties\": false\r",
							"        },\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"integer\"},\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"};\r",
							"pm.test(\"JSON-schema is valid\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// Проверить, что занчение поля name = значению переменной name из окружения\r",
							"let req = request.data;\r",
							"let resp = pm.response.json();\r",
							"let name = pm.response.json().name;\r",
							"pm.environment.set(\"name\", name);\r",
							"\r",
							"pm.test(\"Name value = environment name value\", function() {\r",
							"    pm.expect(req.name).to.eql(pm.environment.get('name'))\r",
							"});\r",
							"\r",
							"// Проверить, что значение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"Response age value corresponds to request age value\", function() {\r",
							"    pm.expect(resp.age).to.eql(req.age)\r",
							"    pm.expect(resp.age).to.be.an(\"string\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. /currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Можете взять любой объект из присланного списка, используйте js random \r",
							"const resp = pm.response.json();\r",
							"let array_len = resp.length\r",
							"console.log('Количество массивов в ответе x = ', array_len)\r",
							"function getRandomInt(array_len) {\r",
							"    return Math.floor(Math.random() * array_len);\r",
							"};\r",
							"console.log('Рандомное число = ', getRandomInt(array_len))\r",
							"console.log('Наш массив = ', massive = resp[getRandomInt(array_len)])\r",
							"console.log('Cur_ID массива = ', massive.Cur_ID)\r",
							"\r",
							"// var res = pm.response.json() //получила список валют\r",
							"// var arr_len = res.length\r",
							"\r",
							"// var min = Math.ceil(0);\r",
							"// var max = Math.floor(arr_len)\r",
							"// var ran = Math.floor(Math.random() * (max - min)) + min;\r",
							"\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос\r",
							"pm.environment.set(\"Cur_ID\", massive.Cur_ID );\r",
							"\r",
							"// pm.environment.set(\"Cur_ID\", res[ran].Cur_ID)\r",
							"\r",
							"// Задание со * 6 и 7\r",
							"// 1) получить список валют\r",
							"// 2) итерировать список валют\r",
							"// 3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"// 4) если возвращается 500 код, переходим к следующей итреации\r",
							"// 5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// 6) если поле есть, пишем в консоль инфу про валюту в виде response\r",
							"// \t{\r",
							"//     \t\"Cur_Abbreviation\": str\r",
							"//     \t\"Cur_ID\": int,\r",
							"//     \t\"Cur_Name\": str,\r",
							"//     \t\"Cur_OfficialRate\": float,\r",
							"//     \t\"Cur_Scale\": int,\r",
							"//     \t\"Date\": str\r",
							"// \t}\r",
							"// 7) переходим к следующей итерации\r",
							"\r",
							"var cur_id = 0;\r",
							"var tok = pm.environment.get(\"token\")  \r",
							"\r",
							"for(let i = 0; i < array_len; i++){\r",
							"    cur_id = resp[i].Cur_ID;\r",
							"    const regRequest = {\r",
							"        'method': 'POST',\r",
							"        'url': 'http://54.157.99.22:80/curr_byn',\r",
							"        'body': {\r",
							"            'mode': 'formdata',\r",
							"            'formdata': [\r",
							"                {'key': 'auth_token', 'value': tok},\r",
							"                {'key': 'curr_code', 'value': cur_id}\r",
							"            ]\r",
							"        }\r",
							"    };\r",
							"    pm.sendRequest(regRequest, (error, response) => {\r",
							"        if(response.code == 200){\r",
							"            var resp = response.json();\r",
							"            if(pm.expect(resp).have.to.property(\"Cur_OfficialRate\")){\r",
							"                console.log(resp)\r",
							"            };\r",
							"        }\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/currency",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. /curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
							"        \"Cur_ID\": {\"type\": \"integer\"},\r",
							"        \"Cur_Name\": {\"type\": \"string\"},\r",
							"        \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
							"        \"Cur_Scale\": {\"type\": \"integer\"},\r",
							"        \"Date\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"additionalProperties\": false\r",
							"};\r",
							"pm.test(\"JSON-schema is valid\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://54.157.99.22:80/curr_byn",
					"protocol": "http",
					"host": [
						"54",
						"157",
						"99",
						"22"
					],
					"port": "80",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://162.55.220.72",
			"type": "string"
		},
		{
			"key": "port",
			"value": "5005",
			"type": "string"
		}
	]
}